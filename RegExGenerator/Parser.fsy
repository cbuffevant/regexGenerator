%{
#indent "off"

open Generators
open System.Diagnostics
%}

%start start
%type < regExGenerator > start

%token ANY_CHAR 
%token OPEN_PARENTHESIS CLOSE_PARENTHESIS
%token OPEN_SET CLOSE_SET
%token<string> LITERAL
%token<char*char> RANGE
%token ALTERNATION
%token<string> ESCAPE
%token ZERO_OR_ONE ZERO_OR_MORE ONE_OR_MORE
%token EOF


%%

start : regEx EOF				{ fun () -> $1 ""  }

regEx :
	|
		{ 
			identity 
		}

	| OPEN_PARENTHESIS regEx CLOSE_PARENTHESIS quantifier regEx
		{
			($4 $2) >> $5
		}

	| OPEN_PARENTHESIS alternation CLOSE_PARENTHESIS quantifier regEx
		{
			$4 (alternation $2) >> $5
		}

	| ANY_CHAR quantifier regEx			
		{ 
			($2 char) >> $3
		}

	| LITERAL quantifier regEx
		{
			$2(literal $1) >> $3
		}

	| ESCAPE quantifier regEx		
		{ 
			$2(literal $1) >> $3
		}
	| OPEN_SET RANGE CLOSE_SET quantifier regEx
		{
			$4 ( range $2 ) >> $5
		}
	| OPEN_SET char CLOSE_SET quantifier regEx
		{
			$4( set $2 ) >> $5
		}

quantifier :
	|						{ Quantifiers.one }
	| ZERO_OR_ONE			{ Quantifiers.zeroOrOne }
	| ZERO_OR_MORE			{ Quantifiers.zeroOrMore }
	| ONE_OR_MORE			{ Quantifiers.oneOrMore }

char: 
	|				{ [] }
	| LITERAL char	{ $1 :: $2 }

alternation:
	| regEx							{ [ $1 ] }
	| regEx ALTERNATION alternation	{ $1 :: $3 }

	
