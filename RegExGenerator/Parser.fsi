// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | ZERO_OR_ONE
  | ZERO_OR_MORE
  | ONE_OR_MORE
  | ESCAPE of (string)
  | RANGE of (char*char)
  | LITERAL of (string)
  | OPEN_SET
  | CLOSE_SET
  | OPEN_PARENTHESIS
  | CLOSE_PARENTHESIS
  | ANY_CHAR
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ZERO_OR_ONE
    | TOKEN_ZERO_OR_MORE
    | TOKEN_ONE_OR_MORE
    | TOKEN_ESCAPE
    | TOKEN_RANGE
    | TOKEN_LITERAL
    | TOKEN_OPEN_SET
    | TOKEN_CLOSE_SET
    | TOKEN_OPEN_PARENTHESIS
    | TOKEN_CLOSE_PARENTHESIS
    | TOKEN_ANY_CHAR
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_regEx
    | NONTERM_quantifier
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( regExGenerator ) 
